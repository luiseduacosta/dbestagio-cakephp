Dicas
=====
$log = $this->Votacao->getDataSource()->getLog(false, false);
debug($log);

/* A variável ordem é a coluna que vai ser utilizada como critério de ordenação */
array_multisort (array_column($array, $ordem), SORT_ASC, $array);

/* Capturar o último parámetro de uma url e trocar por outro valor */
var url = "http://something.com:6688/remote/17/26/172"
url = url.replace(/\/[^\/]*$/, '/175')

/* Outra forma */
/* split the String by split("/") then change the last part and rejoin by join("/"): */
var url = window.location.pathname.split("/").slice(0,-1).join("/")+"/periodo:"+periodo;

Paginação própria
=================

No controller são três métodos:
1) Criar a matriz ou array a partir da(s) tabela(s) utilizando um foreach.
Para poder ordenar a matriz precisa de um campo ($criterio) com a variável com qual vai ser realizada a ordenação.
Depois é só utilizar a função array_multisort($criterio, [SORT_ASC|SORT_DESC], $array).
2) Fazer uma função para alterar a ordem da classificação ascendente ou descendente.
Para isto na primeira linha do index da view tem que colocar uma variável (p. ex. $mudaclassificacao) enviada como parâmetro.
3) A matriz pode ser paginada utilizando a função array_slice($array, $inicio, $qunatidade_de_registros).
4) Fazer o menu de navegação no index da view. São dois menus: um para avançar e retroceder e outro com algumas páginas.
5) As variáveis entre o controller e o view tem que ser enviadas ($this->set()) e recebidas como parâmetros.
As variáveis são:

$ordem com a variável que vai servir como critério de ordenação. Esta variável é passada como link na primeira linha da tabela na view ('index/ordem:variavel') e é capturada como parâmetro no controller. No mesmo link outras variáveis são passada (ex. $pagina, $mudadirecao [esta última para especificar que tem que alterar a ordem ASC para DESC e viceversa].
$direcao com o valor ASC ou DESC para ordenar as colunas
$array paginado (p. ex. $p_array)
$pagina com o valor de cada página do array_slice
$q_paginas com o valor do total das páginas calculado pela divisão sizeof($array) entre a quantidade de registros por página.
A quantidade de registros por página também poderia ser enviada e recebida ($q_registros). Na view poderia haver um formulário para que o usuário selecione a quantidade registros que quer visualizar em cada página.
